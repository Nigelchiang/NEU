<?php

/**
 * Created by PhpStorm.
 * User: Nigel
 * Date: 2016/1/1
 * Time: 20:46
 */
//实验中的验证码识别类
$filename = ".\\training-ecard\\ecard_7.jpg";

class _Captcha {

    /**
     * @var array 二值化后的二位数组
     */
    private $data;
    /**
     * @var array 图像大小
     */
    private $size;

    /**
     * @var string 图片的文件名
     */
    private $filename;
    /**
     * @var resource 图片资源
     */
    public $img;
    /**
     * @var array 识别出的四个字符
     */
    private $letters;
    /**
     * @var array 字符库
     * 有的验证码使用多种字体，则每个字符对应多个01序列
     */
    //public static $keys = array(
    //    '0' => '00000011111100000000000011111111110000000001110000001110000000111000000000110000001100000000001100000011000000000011000000110000000001110000000111000000111000000000111111111100000000000111111100000000',
    //    '1' => '000011000000001100000001100000000011000000111111111111110000001111111111111100000000000000000011000000000000000000110000',
    //    '2' => '000011000000111100000001110000011111000000011000001110110000001100000111001100000011000001100011000000110000110000110000001110011100001100000001111110000011000000001111000000110000',
    //    '3' => '0001100000001100000000011000000001100000001100001000001100000011000110000011000000110001110000110000001110011100011100000001111101111110000000001110001111000000',
    //    '4' => '00000000001100000000000000000111000000000000000111110000000000000011001100000000000011110011000000000001100010110000000000111111111111110000001111111111111100000000000000110000000000000000001100000000',
    //    '5' => '001111111100011000000011111111000110000000110001100000110000001100110000001100000011001100000011000000110011000000110000001100111000011000000011000111111110000000110000111110000000',
    //    '6' => '000000001111110000000000001111111110000000001111110001110000000111001100001100000011100011000011000000110000110000110000000000001110011100000000000001111110000000000000001111000000',
    //    '7' => '00110000000000000000001100000000000000000011000000000011000000110000000111100000001100000111100000000011000111100000000000110111100000000000001111000000000000000011100000000000000000110000000000000000',
    //    '8' => '000011100011110000000001111101111110000000111011110001110000001100011000001100000011000110000011000000110001100000110000001100111100011100000001111111111110000000001110011111000000',
    //    '9' => '000011111000000000000001111111000001100000111000111000011000001100000110001100000011000001100111000000110000011011100000001110001111110000000001111111111000000000000111110000000000',
    //    'A' => '0000000000000011000000000000000111110000000000000011110000000000000111110000000000000111111100000000000011100110000000000011100001100000000000111111111000000000000000111111110000000000000000111111000000000000000000110000',
    //    'B' => '001111111111111100000011111111111111000000110000011000110000001100000110001100000011000001100011000000011000111001100000000111111011011000000000111100111100000000000000000111000000',
    //    'C' => '00000000111110000000000000111111111000000000011110000110000000001110000000110000000110000000001100000011000000000011000000110000000000110000001100000000011000000011100000001110000000111000000011000000',
    //    'D' => '0011111111111111000000111111111111100000001100000000001100000001100000000011000000011000000000110000000011000000001100000000110000000011000000000110000001100000000000110000111000000000000111111100000000000000111100000000',
    //    'E' => '001111111111111000000011111111111111000000110000110000110000001100001100001100000011000011000011000000110000110000110000001100001100001100000011000011000011000000110000000000000000',
    //    'F' => '001111111111111100000011111111111111000000110000111000000000001100001100000000000011000011000000000000110000110000000000001100001100000000000011000011000000000000010000000000000000',
    //    'G' => '0000000011111100000000000011111111100000000011110000011100000001110000000011000000011000011000110000001100000110001100000011000011000011000000110000110001100000000110001101110000000001100011111000000000000000111000000000',
    //    'H' => '001111111111111100000011111111111111000000000000011000000000000000000110000000000000000001100000000000000000011000000000000000001100000000000000000011000000000000000000110000000000000000001100000000000011111111111111000000111111111111110000',
    //    'I' => '0011000000000011000000110000000000110000001100000000001100000011111111111111000000111111111111110000001100000000001100000011000000000011000000110000000000110000',
    //    'J' => '0000000000011100000000000000000111100000001100000000011000000011000000000011000000110000000000110000001100000000011100000011111111111111000000111111111111100000001100000000000000000011000000000000000000110000000000000000',
    //    'K' => '001111111111111100000011111111111111000000000000111000000000000000110011000000000000011000011000000000001100000011000000000110000000011000000011000000000011000000000000000000110000',
    //    'L' => '0011111111111111000000111111111111110000000000000000001100000000000000000011000000000000000000110000000000000000001100000000000000000011000000000000000000110000',
    //    'M' => '0000000000001111000000000001111111110000000111111111000000000001111000000000000000111111111110000000000000011111011100000000000000000111000000000000001111110000000000011110100000000000111111000000000000111110000000000000001111111111100000000000000011111111000000000000000000110000',
    //    'N' => '001111111111111100000011111111111111000000001100000000000000000001110000000000000000001110000000000000000000110000000000000000000110000000000000000000111000000000000000000011000000000000000000011000000011111111111111000000011111111111110000',
    //    'O' => '',
    //    'P' => '00111111111111110000001111111111111100000011000001101000000000110000011000000000001110001110000000000001111111000000000000001111100000000000',
    //    'Q' => '0000000111110000000000000111111110000000000011100001110000000001110000000110000000011000000001110000001100000000001100000011000000011011000000110000000111110000001100000000111100000011000000000111000000011000000000111000000111100000111111000000111111111100111000000001111110000111',
    //    'R' => '00111111111111110000001111111111111100000011000000111000000000110000001100000000001110000011100000000011100001111100000000011100011111100000000011111100111000000000001110000111000000000000000000110000',
    //    'S' => '00000000000001100000000001111000011100000000111110000011100000011001110000011000001100001100000110000011000011000001100000110000110000011000001100001110001100000001000001111110000000000000001111000000',
    //    'T' => '00110000000000000000001100000000000000000011000000000000000000110000000000000000001111111111111100000011111111111111000000110000000000000000001100000000000000000011000000000000000000110000000000000000',
    //    'U' => '0011111111110000000000111111111111000000000000000000111000000000000000000111000000000000000000110000000000000000001100000000000000000011000000000000000001110000000000000001111000000011111111111100000000111111111000000000',
    //    'V' => '00111000000000000000001111111100000000000000001111111100000000000000001111110000000000000000011100000000000000111111000000000001111111000000000011111100000000000011111000000000000000110000000000000000',
    //    'W' => '0011100000000000000000111111000000000000000001111111000000000000000011111111000000000000000001110000000000000011111100000000001111110000000000011111110000000000001111000000000000000011111111111110000000000011111111110000000000000000001100000000000000011111000000000000111111000000',
    //    'X' => '000000000000001100000011000000000111000000111000000011100000000111100001110000000000011101110000000000000011111000000000000000011110000000000000001111110000000000000111001110000000000111000000111000000011100000000111000000110000000000110000',
    //    'Y' => '0011000000000000000000111000000000000000000011100000000000000000011110000001100000000001110001111000000000000111111000000000000011111000000000000011111000000000000011111000000000000011110000000000000000110000000000000000',
    //    'Z' => '001100000000011100000011000000001111000000110000000110110000001100000011001100000011000011100011000000110001110000110000001100111000001100000011011000000011000000111100000000110000001110000000001100000011100000000011000000110000000000110000',
    //    'a' => '0000000000111100000000000000111111100000000000001100001100000000000110000011000000000001100000110000000000011111111000000000000111111110000000000000000000110000',
    //    'b' => '0011111111111111000000111111111111110000000000001100001100000000000110000011000000000001100000110000000000011100011100000000000011111110000000000000011111000000',
    //    'c' => '00000000001111000000000000001111111000000000000111000011000000000001100000110000000000011000001100000000000110000111000000000000110001100000',
    //    'd' => '0000000001111100000000000000111111100000000000011100011100000000000110000011000000000001100000110000000000001000011100000011111111111111000000111111111111110000',
    //    'e' => '0000000000111100000000000000111111100000000000011101111100000000000110010011000000000001101100110000000000011011001100000000000111100010000000000000110001100000',
    //    'f' => '00000001100000000000000000011000000000000000111111111111000000011111111111110000001110011000000000000011000110000000000000110001100000000000',
    //    'g' => '0000000000111100000100000000111111100001000000001100001100010000000110000011000100000001100000111001000000011000110001110000000111111111111100000000111111111100',
    //    'h' => '00111111111111110000001111111111111100000000000011000000000000000001100000000000000000011000000000000000000111111111000000000000111111110000',
    //    'i' => '0001100111111111000000011001111111110000',
    //    'j' => '000000000000000001100000000000000000011100000000000000000001000000000000000000010001100111111111111100011001111111111111',
    //    'k' => '0011111111111111000000111111111111110000000000000001100000000000000000110000000000000000011110000000000000001100110000000000000110000111000000000001000000110000',
    //    'l' => '',
    //    'm' => '000000011111111100000000000111111111000000000000011000000000000000001100000000000000000110000000000000000001111111110000000000001111111100000000000011000000000000000001100000000000000000011000000000000000000111111111000000000000111111110000',
    //    'n' => '00000001111111110000000000011111111100000000000011000000000000000001100000000000000000011000000000000000000111111111000000000000111111110000',
    //    'o' => '',
    //    'p' => '0000001111111111111100000011111111111111000000001100001100000000000110000011000000000001100000110000000000011100011100000000000011111110000000000000011111000000',
    //    'q' => '00000000001111000000000000001111111000000000000011000011000000000001100000110000000000011000011100000000000111111111111100000001111111111111',
    //    'r' => '00000001111111110000000000011111111100000000000011000000000000000000100000000000000000011000000000000000000111100000000000000001111000000000',
    //    's' => '00000000011100110000000000001111001100000000000011011011000000000000110110110000000000011001101100000000000111011111000000000001110011100000',
    //    't' => '000000011000000000000000000110000000000000001111111111110000000011111111111100000000000110000000000000000001100000000000',
    //    'u' => '00000001111111100000000000011111111100000000000000000011000000000000000000110000000000000000001100000000000111111111000000000001111111110000',
    //    'v' => '0000000110000000000000000001111100000000000000000111111000000000000000001111000000000000000011110000000000000011110000000000000111110000000000000001100000000000',
    //    'w' => '0000000111110000000000000001111111100000000000000001111100000000000000001111000000000000111110000000000000011111000000000000000011111111000000000000000001110000000000000011111100000000000111111100000000000001110000000000',
    //    'x' => '000000011000001100000000000111000111000000000000111011100000000000000111100000000000000000111000000000000000011111000000000000001110111000000000000111000111000000000001100000110000',
    //    'y' => '000000011000000000000000000111100000000000000000111110000011000000000011111011110000000000000111110000000000000111100000000000000111100000000000000111100000000000000001100000000000',
    //    //'z' => '0000000110000011000000000001100001110000000000011000111100000000000110011111000000000001111110110000000000011111001100000000000111000011000000000001100000110000',);
    protected static $keys = array(
        '1' => array(
            '0000100000110011111000001100000110000011000001100001110000011101111111',
            '001111000011111100011001110110000110110000110110000111110000111110000110110000110110000110111000110011000110011111100001111000',
            '000111001111011111111111110111100111000111000111000111000111000111000111000111000111',
        ),
        '2' => array(
            '0011111000111001111011100011101110001110000000111000001100000011000000011111111111111111111111111111',
            '001111100011111110111000110110000111000000111000000111000001110000011110000111100001111000011110000111100000111111111111111111',
            '000111100001111110011100111011000011000000011000000111000001111000011110000111100000111000001110000011110000011111111111111111',
            '0011111100011100111101110011110111001111000001111000001110000001000000011111111111111111111111111111',
            '001111100011111110111000110111000111000000111000000111000001110000011110000111100001111000011110000011100000111111111111111111',

        ),
        '3' => array(
            '0011111100011000111011100011100110001110000000111000000111000001111000000000111000000011111100001111111000111111100111100111111000',
            '000001110000011110000011110000111110001111110001101110011001110111001110110001110111111111111111111000001110000001110000001110',
            '0011110001111110111001111110011100000111000111100001111000000111000000110000001111000011111001110111111000111100'),
        '4' => array(
            '00000011100000001111000000011110000000011100000100111000010001110001000011100100000111001111111111111111111111000000111000000001110000000011100',
            '00000011100000001111000000111110000011011100000100111000010001110001000011100100000111001111111111111111111111000000111000000001110000000011100',
            '000001110000011110000011110000111110001111110001101110011001110111001110110001110111111111111111111000001110000001110000001110',

        ),
        '5' => array(
            '0111111110011111111001111111100100000000010000000001111110000100001110000000111100000011111110001111111000111111100111100111111000',
            '011111110011111110011000000011000000111111000111111110111001110000000111000000111000000111110000110111001110011111100001111000',
        ),
        '6' => array(
            '00000011100000011100000011100000001110000000011100000001111111110011110001110111100011111110000111111110001111011100011100111000110000011111000',
            '0000001100000011100000111000000111000000011100000011101111101111001111111000011111100001111110000111111100011101110011100001111100',
            '0011110001111110111000111100001011111100111111101110011111100111111000111100001111000011111001110111111000111100',
        ),
        '7' => array(
            '111111111111111111111111111100000010000000110000000100000001000000001000000010000000110000000100000001100000001000000',
            '1111111111111111000001110000011000001110000011000001110000011000000110000011100000110000001100000011000000110000',
            '1111111111111111111011111111101000000100000000010000000010000000010000000001000000001000000000100000000100000000110000000010000000',
        ),
        '8' => array(
            '0011110001111110111001111100001111000011111001110111111001111110111001111100001111000011111001110111111000111100',
            '00011111100011100011100111000111001110001110011110011100111111100000011111100011101111101110000111111100000111111000001110111000111000111111000',
            '00111111000011100111101110000111011100001110011110111000111111110000111111100011111111101110000111011100000111111000011101110000110000011111000',
            '',
        ),
        '9' => array(),
        '0' => array(
            '000111110000001100011100011100011110111100001110111100001111111100001111111100001110011100001110011100011100000111111000',
            '0011110001111110111001111110001111000011110000111100001111000011110000111100001111100011111001110111111000111100',
            '00011110000011111110001100111001110001110111000111011100011101110001110111000111111100011101110001110111000110001100111000111111000001111000',
            '001111000011111100011001110111000110110000110110000111110000110110000110110000110110000110111000110011001110011111100001111000',
            '000111110000011100011100011100001110111100001110111100001111111100001111111100001110011100001110011100011100000111110000',
        ),
    );
    /**
     * @var string 最终识别结果
     */
    public $result;

    function __construct($filename) {

        $this->filename = $filename;

    }

    /**
     * 二值化
     */
    function toBinary() {

        $this->img  = imagecreatefromjpeg($this->filename);
        $this->size = getimagesize($this->filename);
        $white      = imagecolorallocate($this->img, 255, 255, 255);
        $black      = imagecolorallocate($this->img, 0, 0, 0);

        //一列一列地扫描
        for ($i = 0; $i < $this->size[0]; ++$i) {
            for ($j = 0; $j < $this->size[1]; ++$j) {
                $rgb      = imagecolorat($this->img, $i, $j);
                $rgbarray = imagecolorsforindex($this->img, $rgb);
                // =========================================================
                // 任何验证码的数字和字母部分为了和验证码图片背景有所区别
                // 都必须对文字和背景图片的RGB进行区分，下面的值是我根据
                // 验证码的图片进行区分的，您可以分析您的图片，找到如下规律
                // =========================================================
                if ($rgbarray['red'] < 120
                    || $rgbarray['green'] < 120
                    || $rgbarray['blue'] < 120
                ) {
                    imagesetpixel($this->img, $i, $j, $black);
                    $this->data[$i][$j] = 1;
                } else {
                    $this->data[$i][$j] = 0;
                    imagesetpixel($this->img, $i, $j, $white);
                }
            }
        }
    }

    /**
     * 去除噪点
     */
    function filter() {

        $white = imagecolorallocate($this->img, 255, 255, 255);
        for ($i = 0; $i < $this->size[0]; ++$i) {
            for ($j = 0; $j < $this->size[1]; ++$j) {
                $num = 0;
                if ($this->data[$i][$j] == 1) {
                    // 上
                    if (isset($this->data[$i - 1][$j])) {
                        $num += $this->data[$i - 1][$j];
                    }
                    // 下
                    if (isset($this->data[$i + 1][$j])) {
                        $num += $this->data[$i + 1][$j];
                    }
                    // 左
                    if (isset($this->data[$i][$j - 1])) {
                        $num += $this->data[$i][$j - 1];
                    }
                    // 右
                    if (isset($this->data[$i][$j + 1])) {
                        $num += $this->data[$i][$j + 1];
                    }
                    // 上左
                    if (isset($this->data[$i - 1][$j - 1])) {
                        $num += $this->data[$i - 1][$j - 1];
                    }
                    // 上右
                    if (isset($this->data[$i - 1][$j + 1])) {
                        $num += $this->data[$i - 1][$j + 1];
                    }
                    // 下左
                    if (isset($this->data[$i + 1][$j - 1])) {
                        $num += $this->data[$i + 1][$j - 1];
                    }
                    // 下右
                    if (isset($this->data[$i + 1][$j + 1])) {
                        $num += $this->data[$i + 1][$j + 1];
                    }
                    //如果num==0，则为噪点
                    if ($num == 0) {
                        $this->data[$i][$j] = 0;
                        imagesetpixel($this->img, $i, $j, $white);
                    }
                }
            }
        }
    }


    /**
     * 分隔
     */
    function spilt() {

        $data = array();
        $tmp  = array();
        //去除所有列中的空行，每个字母的所有列为data中的一项
        //data第一维个数为验证码字母的个数
        //如果有字母粘连情况，则应控制tmp的最大项数，在达到最大数之后强制向data中添加tmp这一项，tmp清零
        foreach ($this->data as &$col) {
            if (array_sum($col) == 0) {
                if (isset($in) && $in) {
                    $in     = false;
                    $data[] = $tmp;
                    $tmp    = array();
                }
            } else {
                $in    = true;
                $tmp[] = $col;
            }
        }
        $chars = array();
        $tmp   = array();
        //将每个字符的每一个列数据依次移出一个组成一个新的行数组
        foreach ($data as &$letter) {
            while (count($letter[array_rand($letter)])) {
                $row = array();
                foreach ($letter as &$col) {
                    $row[] = array_shift($col);
                }
                if (array_sum($row) == 0) {
                    if (isset($in) && $in) {
                        $in      = false;
                        $chars[] = $tmp;
                        $tmp     = array();
                    }
                } else {
                    $in    = true;
                    $tmp[] = $row;
                }

            }

        }
        //组合数组的01序列
        foreach ($chars as $char) {
            $row = array();
            foreach ($char as $item) {
                $row[] = join('', $item);
            }
            $this->letters[] = join("", $row);
        }
        //打印
        foreach ($this->letters as $letter) {
            echo "=>" . $letter . "<=\n";
        }
        //$inLetter = false;
        ////$letter   = '';
        ////总的字符二值数组
        //$letters = array();
        ////横坐标不变，纵坐标改变，则为一列一列扫描
        ////x:切割后单个字符的二值化数组的横坐标
        //for ($i = 0, $x = 0; $i < $this->size[0]; ++$i) {
        //    //一列的和
        //    $colSum = 0;
        //    //数组的一列
        //    $col = array();
        //    for ($j = 0; $j < $this->size[1]; ++$j) {
        //        $colSum += $this->data[$i][$j];
        //        $col[$x][] = $this->data[$i][$j];
        //    }
        //    //字符部分列 此时未发生粘连
        //    //if ($colSum != 0 && strlen($letter) < 280) {
        //    //    $inLetter = true;
        //    //    $letter .= $col;
        //    //}
        //    if ($colSum != 0) {
        //        $inLetter = true;
        //        ++$x;
        //        //$letter .= $col;
        //    }
        //    //如果01序列的长度超过了最宽字符的长度（此时是280），则判断发生了粘连，
        //    //按照左边为最宽字符进行切割
        //    //if ($colSum != 0 && strlen($letter) >= 280) {
        //    //    $inLetter        = true;
        //    //    $this->letters[] = $letter;
        //    //    echo "=>{$letter}<=\n";
        //    //    $letter = '';
        //    //}
        //
        //    //现在这个验证码的位置会上下变，会影响精确度，需要上下切割，加上之前的左右切割，则正好完整的切割出一个字符
        //
        //
        //    //到字符最后一列,或者到达图片的最右侧
        //    if (($colSum == 0 && $inLetter) || ($inLetter && $i == $this->size[0] - 1)) {
        //        //$this->letters[] = $letter;
        //        $letters[] = $col;
        //        //echo "=>{$letter}<=\n";
        //        //$letter = '';
        //        //完成一个字符，则x恢复0
        //        $x        = 0;
        //        $inLetter = false;
        //    }
        //}
        ////纵坐标不变，开始横向扫描，并连接01序列
        //foreach ($letters as $letter) {
        //    $in   = false;
        //    $char = '';
        //    for ($j = 0; $j < $this->size[1]; ++$j) {
        //        $row = 0;
        //        $str = '';
        //        for ($i = 0; $i < count($letter); ++$i) {
        //            $row += $letter[$i][$j];
        //            $str .= $letter[$i][$j];
        //        }
        //        if ($row != 0) {
        //            $in = true;
        //            $char .= $str;
        //        }
        //        if (($row == 0 && $in) || ($in && $j == $this->size[1] - 1)) {
        //            $this->letters[] = $char;
        //            echo "=>$char<=\n";
        //            break;
        //        }
        //
        //    }
        //}
    }


    /**
     * 比较，匹配最佳字符
     */
    function compare() {

        $result = '';
        foreach ($this->letters as $letter) {
            $max       = 0.0;
            $character = '';
            foreach (self::$keys as $key => $value) {
                $percent = 0.0;
                similar_text($value, $letter, $percent);
                if (intval($percent) > $max) {
                    $max       = $percent;
                    $character = $key;
                    if (intval($percent) > 99) {
                        break;
                    }
                }
            }
            //echo $max . "\n";
            $result .= $character;
        }
        $this->result = $result;
    }

    /**
     * 获取字符库
     */
    function train() {

    }

    /**
     * 测试正确率
     */
    function test() {

    }
}


/**
 *保存keys 10个数字、26X2个字母
 */
//新建图像
//$filename = ".\\training-ecard\\ecard_4.jpg";
$tmp = new _Captcha($filename);
$tmp->toBinary();
imagejpeg($tmp->img, "step1.jpg");
$tmp->filter();
imagejpeg($tmp->img, "step2.jpg");
$tmp->spilt();
//$tmp->compare();
//echo $tmp->result;
//echo strlen($tmp::$keys['W']);